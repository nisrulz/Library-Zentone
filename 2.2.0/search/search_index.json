{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Easily generate audio tone of a specific frequency and volume in Android.","title":"Overview"},{"location":"changelog/","text":"Changelog \u00b6 2.2.0 [13 Jul 2022] \u00b6 \ud83e\uddf9 Improved versioned docs \u2795 Added TriangleWaveGenerator 2.1.0 [14 Feb 2022] \u00b6 \ud83e\uddf9 Reworked API to allow providing custom Wave Generator \u2795 Added SquareWaveGenerator 2.0.0 [14 Feb 2022] \u00b6 \u2705 Switched to Kotlin \ud83d\udc40 Uses coroutines \ud83e\uddf9 Reworked API \u26a0\ufe0f ZenTone is no more a singleton thus allowing running multiple instances of it. \u26a0\ufe0f minSdk = 18 \u274c Time duration cannot be set anymore. This is now dependent on when one calls stop on ZenTone instance. 1.0.3 [01 Aug 2016] \u00b6 \u2705 Updated code to handle volume \ud83e\uddf9 Replace maven-push.gradle file with the one from github repo \ud83d\udcc3 Added Java Docs \ud83e\uddf0 Code cleanup and updated dependencies","title":"Change Log"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#220-13-jul-2022","text":"\ud83e\uddf9 Improved versioned docs \u2795 Added TriangleWaveGenerator","title":"2.2.0 [13 Jul 2022]"},{"location":"changelog/#210-14-feb-2022","text":"\ud83e\uddf9 Reworked API to allow providing custom Wave Generator \u2795 Added SquareWaveGenerator","title":"2.1.0 [14 Feb 2022]"},{"location":"changelog/#200-14-feb-2022","text":"\u2705 Switched to Kotlin \ud83d\udc40 Uses coroutines \ud83e\uddf9 Reworked API \u26a0\ufe0f ZenTone is no more a singleton thus allowing running multiple instances of it. \u26a0\ufe0f minSdk = 18 \u274c Time duration cannot be set anymore. This is now dependent on when one calls stop on ZenTone instance.","title":"2.0.0 [14 Feb 2022]"},{"location":"changelog/#103-01-aug-2016","text":"\u2705 Updated code to handle volume \ud83e\uddf9 Replace maven-push.gradle file with the one from github repo \ud83d\udcc3 Added Java Docs \ud83e\uddf0 Code cleanup and updated dependencies","title":"1.0.3 [01 Aug 2016]"},{"location":"integration/","text":"Including in your project \u00b6 ZenTone is available in the MavenCentral, so getting it as simple as adding it as a dependency inside your build.gradle file implementation \"com.github.nisrulz:zentone:$version\" where $version corresponds to latest version published in","title":"Integration"},{"location":"integration/#including-in-your-project","text":"ZenTone is available in the MavenCentral, so getting it as simple as adding it as a dependency inside your build.gradle file implementation \"com.github.nisrulz:zentone:$version\" where $version corresponds to latest version published in","title":"Including in your project"},{"location":"usage/","text":"Usage \u00b6 Create an instance of ZenTone : \u00b6 val zenTone = ZenTone() ZenTone accepts 3 arguments, each having a sensible default: sampleRate : Int = 44100 encoding : Int = AudioFormat.ENCODING_PCM_16BIT channelMask : Int = AudioFormat.CHANNEL_OUT_MONO based on your requirement, you can pass a different value when instantiating ZenTone i.e val zenTone = ZenTone(channelMask = AudioFormat.CHANNEL_OUT_STEREO) Start playing audio with a frequency and volume: \u00b6 zenTone.play(frequency = 400f, volume = 2) play() accepts 3 arguments: frequency : Float volume : Int. It ranges from 0 to 100, where 0 is no audio and 100 is full volume. waveByteArrayGenerator : WaveByteArrayGenerator = SineWaveGenerator, here SineWaveGenerator is a sensible default. POssible options are SineWaveGenerator , SquareWaveGenerator and TriangleWaveGenerator based on your requirement, you can pass a different value when calling play() i.e zenTone.play(frequency = 440f, volume = 10, waveByteArrayGenerator = SquareWaveGenerator) Stop playing audio: \u00b6 zenTone.stop() To release resources held by ZenTone i.e release mic, you can call release() function. Usually you'll need to call this in onDestroy() : override fun onDestroy() { super.onDestroy() zenTone.release() } Check if ZenTone is playing audio by querying the isPlaying flag: \u00b6 val isPlaying = zenTone.isPlaying","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#create-an-instance-of-zentone","text":"val zenTone = ZenTone() ZenTone accepts 3 arguments, each having a sensible default: sampleRate : Int = 44100 encoding : Int = AudioFormat.ENCODING_PCM_16BIT channelMask : Int = AudioFormat.CHANNEL_OUT_MONO based on your requirement, you can pass a different value when instantiating ZenTone i.e val zenTone = ZenTone(channelMask = AudioFormat.CHANNEL_OUT_STEREO)","title":"Create an instance of ZenTone:"},{"location":"usage/#start-playing-audio-with-a-frequency-and-volume","text":"zenTone.play(frequency = 400f, volume = 2) play() accepts 3 arguments: frequency : Float volume : Int. It ranges from 0 to 100, where 0 is no audio and 100 is full volume. waveByteArrayGenerator : WaveByteArrayGenerator = SineWaveGenerator, here SineWaveGenerator is a sensible default. POssible options are SineWaveGenerator , SquareWaveGenerator and TriangleWaveGenerator based on your requirement, you can pass a different value when calling play() i.e zenTone.play(frequency = 440f, volume = 10, waveByteArrayGenerator = SquareWaveGenerator)","title":"Start playing audio with a frequency and volume:"},{"location":"usage/#stop-playing-audio","text":"zenTone.stop() To release resources held by ZenTone i.e release mic, you can call release() function. Usually you'll need to call this in onDestroy() : override fun onDestroy() { super.onDestroy() zenTone.release() }","title":"Stop playing audio:"},{"location":"usage/#check-if-zentone-is-playing-audio-by-querying-the-isplaying-flag","text":"val isPlaying = zenTone.isPlaying","title":"Check if ZenTone is playing audio by querying the isPlaying flag:"}]}